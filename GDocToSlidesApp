package com.myproject.gdocs2slides;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*La classe GDocToSlidesApp fournit une interface graphique Swing pour convertir un Google Doc en pr√©sentation Google Slides,
 * permettant √† l'utilisateur de saisir un ID ou une URL de document et de copier le lien de la pr√©sentation g√©n√©r√©e.
 */
public class GDocToSlidesApp {

    private static String presentationLink = null;

    /* Point d'entr√©e principal de l'application.
*/
    public static void main(String[] args) {
        // Ex√©cute la cr√©ation de l'interface graphique sur le thread de distribution des √©v√©nements
        SwingUtilities.invokeLater(GDocToSlidesApp::createAndShowGUI);
    }

    /*Cr√©e et affiche l'interface graphique de l'application.*/
    private static void createAndShowGUI() {
        // Initialisation de la fen√™tre principale
        JFrame frame = new JFrame("üìù GDoc to Slides Converter");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setMinimumSize(new Dimension(500, 350));
        frame.setLocationRelativeTo(null);

        // Configuration de l'apparence de la fen√™tre
        frame.getContentPane().setBackground(new Color(20, 20, 20));
        frame.getRootPane().setBorder(BorderFactory.createLineBorder(new Color(40, 40, 40), 5));

        // Cr√©ation du panneau principal avec une disposition en bordure
        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
        mainPanel.setBorder(new EmptyBorder(15, 15, 15, 15));
        mainPanel.setBackground(new Color(20, 20, 20));

        // Panneau d'entr√©e pour l'URL ou l'ID du document
        JPanel inputPanel = new JPanel(new BorderLayout(10, 10));
        inputPanel.setBackground(new Color(30, 30, 30));
        inputPanel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(40, 40, 40), 2),
                "Enter Google Doc URL or ID", TitledBorder.LEFT, TitledBorder.TOP, null, Color.WHITE));

        // Champ de texte pour l'entr√©e de l'URL ou de l'ID
        JTextField docIdField = new JTextField();
        docIdField.setFont(new Font("SansSerif", Font.PLAIN, 14));
        docIdField.setForeground(Color.WHITE);
        docIdField.setBackground(new Color(40, 40, 40));
        docIdField.setBorder(BorderFactory.createLineBorder(new Color(50, 50, 50), 1));
        docIdField.setToolTipText("Paste the Google Document URL or ID here");

        // Bouton pour lancer la conversion
        JButton convertButton = new JButton("Convert");
        convertButton.setPreferredSize(new Dimension(100, 30));
        convertButton.setFont(new Font("SansSerif", Font.BOLD, 13));
        convertButton.setForeground(Color.WHITE);
        convertButton.setBackground(new Color(50, 50, 50));
        convertButton.setBorder(BorderFactory.createLineBorder(new Color(40, 40, 40), 2));

        // √âtiquette d'information pour l'utilisateur
        JLabel infoLabel = new JLabel("You can paste the full URL or just the ID.", SwingConstants.CENTER);
        infoLabel.setForeground(Color.WHITE);
        infoLabel.setFont(new Font("SansSerif", Font.PLAIN, 12));

        inputPanel.add(docIdField, BorderLayout.CENTER);
        inputPanel.add(convertButton, BorderLayout.EAST);
        inputPanel.add(infoLabel, BorderLayout.SOUTH);

        // Zone de texte pour afficher les r√©sultats
        JTextArea outputArea = new JTextArea();
        outputArea.setFont(new Font("Monospaced", Font.PLAIN, 13));
        outputArea.setLineWrap(true);
        outputArea.setWrapStyleWord(true);
        outputArea.setEditable(false);
        outputArea.setForeground(Color.WHITE);
        outputArea.setBackground(new Color(25, 25, 25));
        outputArea.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(40, 40, 40), 2),
                "Output", TitledBorder.LEFT, TitledBorder.TOP, null, Color.WHITE));
        outputArea.setText("Paste a Google Doc URL or ID and click Convert to generate a Slides presentation.");

        JScrollPane scrollPane = new JScrollPane(outputArea);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());

        // Bouton pour copier le lien de la pr√©sentation
        JButton copyButton = new JButton("Copy Link");
        copyButton.setEnabled(false);
        copyButton.setForeground(Color.WHITE);
        copyButton.setBackground(new Color(50, 50, 50));
        copyButton.setBorder(BorderFactory.createLineBorder(new Color(40, 40, 40), 2));
        copyButton.setFont(new Font("SansSerif", Font.BOLD, 13));
        copyButton.setToolTipText("Copy the presentation link to clipboard");

        JPanel copyPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        copyPanel.setBackground(new Color(20, 20, 20));
        copyPanel.add(copyButton);

        // Ajout des composants au panneau principal
        mainPanel.add(inputPanel, BorderLayout.NORTH);
        mainPanel.add(scrollPane, BorderLayout.CENTER);
        mainPanel.add(copyPanel, BorderLayout.SOUTH);

        // Action du bouton de conversion
        convertButton.addActionListener((ActionEvent e) -> {
            // R√©cup√©ration et validation de l'entr√©e utilisateur
            String input = docIdField.getText().trim();
            if (input.isEmpty()) {
                outputArea.setText("‚ö† Please enter a Google Doc URL or ID.");
                return;
            }
            String docId = extractDocId(input);
            if (docId.isEmpty()) {
                outputArea.setText("‚ö† Invalid Google Doc URL or ID.");
                return;
            }
            // D√©sactivation des boutons pendant la conversion
            convertButton.setEnabled(false);
            copyButton.setEnabled(false);
            presentationLink = null;
            outputArea.setText("üîÑ Converting... Please wait.");
            // Lancement de la conversion dans un thread s√©par√©
            new Thread(() -> {
                try {
                    String slidesUrl = SlidesWriter.convert(docId);
                    // Mise √† jour de l'interface graphique avec le r√©sultat
                    SwingUtilities.invokeLater(() -> {
                        outputArea.setText("‚úÖ Presentation created:\n" + slidesUrl);
                        presentationLink = slidesUrl;
                        copyButton.setEnabled(true);
                        convertButton.setEnabled(true);
                    });
                } catch (Exception ex) {
                    // Gestion des erreurs lors de la conversion
                    SwingUtilities.invokeLater(() -> {
                        outputArea.setText("‚ùå Error:\n" + ex.getMessage());
                        copyButton.setEnabled(false);
                        convertButton.setEnabled(true);
                    });
                    ex.printStackTrace();
                }
            }).start();
        });

        // Action du bouton de copie
        copyButton.addActionListener(e -> {
            // Copie du lien de la pr√©sentation dans le presse-papiers
            if (presentationLink != null) {
                StringSelection selection = new StringSelection(presentationLink);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(selection, null);
                JOptionPane.showMessageDialog(frame, "Link copied to clipboard!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(frame, "No link to copy!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        frame.setContentPane(mainPanel);
        frame.setVisible(true);
    }

    /* Extrait l'ID du document Google √† partir d'une URL ou d'un ID direct.*/
    private static String extractDocId(String input) {
        // V√©rification si l'entr√©e est une URL Google Docs
        if (input.contains("docs.google.com/document/d/")) {
            // Extraction de l'ID √† l'aide d'une expression r√©guli√®re
            Pattern pattern = Pattern.compile("/d/([a-zA-Z0-9_-]+)");
            Matcher matcher = pattern.matcher(input);
            if (matcher.find()) {
                return matcher.group(1);
            } else {
                return "";
            }
        } else if (input.matches("[a-zA-Z0-9_-]+")) {
            // Si l'entr√©e est un ID valide, la retourner directement
            return input;
        } else {
            return "";
        }
    }
}
